// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: metadata.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const metadataInsert = `-- name: MetadataInsert :one
INSERT INTO metadatas (
    object_id,
    document_id,
    key,
    value
) VALUES (
    $1,
    $2,
    $3,
    $4
)
ON CONFLICT (object_id, document_id, key, value) DO NOTHING
RETURNING object_id, document_id, key, value, created_at
`

type MetadataInsertParams struct {
	ObjectID   pgtype.UUID
	DocumentID pgtype.UUID
	Key        string
	Value      string
}

func (q *Queries) MetadataInsert(ctx context.Context, db DBTX, arg *MetadataInsertParams) (*Metadata, error) {
	row := db.QueryRow(ctx, metadataInsert,
		arg.ObjectID,
		arg.DocumentID,
		arg.Key,
		arg.Value,
	)
	var i Metadata
	err := row.Scan(
		&i.ObjectID,
		&i.DocumentID,
		&i.Key,
		&i.Value,
		&i.CreatedAt,
	)
	return &i, err
}

const metadataInsertBatch = `-- name: MetadataInsertBatch :exec
INSERT INTO metadatas (object_id, document_id, key, value)
SELECT unnest($1::uuid[]), unnest($2::uuid[]), unnest($3::text[]), unnest($4::text[])
ON CONFLICT (object_id, document_id, key, value) DO NOTHING
`

type MetadataInsertBatchParams struct {
	ObjectIds   []pgtype.UUID
	DocumentIds []pgtype.UUID
	Keys        []string
	Values      []string
}

func (q *Queries) MetadataInsertBatch(ctx context.Context, db DBTX, arg *MetadataInsertBatchParams) error {
	_, err := db.Exec(ctx, metadataInsertBatch,
		arg.ObjectIds,
		arg.DocumentIds,
		arg.Keys,
		arg.Values,
	)
	return err
}
