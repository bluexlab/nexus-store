// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: migration.sql

package dbsqlc

import (
	"context"
)

const migrationDeleteByVersionMany = `-- name: MigrationDeleteByVersionMany :many
DELETE FROM _migration
WHERE version = any($1::bigint[])
RETURNING id, created_at, version
`

func (q *Queries) MigrationDeleteByVersionMany(ctx context.Context, db DBTX, version []int64) ([]*Migration, error) {
	rows, err := db.Query(ctx, migrationDeleteByVersionMany, version)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Migration
	for rows.Next() {
		var i Migration
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Version); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const migrationGetAll = `-- name: MigrationGetAll :many
SELECT id, created_at, version
FROM _migration
ORDER BY version
`

func (q *Queries) MigrationGetAll(ctx context.Context, db DBTX) ([]*Migration, error) {
	rows, err := db.Query(ctx, migrationGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Migration
	for rows.Next() {
		var i Migration
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Version); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const migrationInsert = `-- name: MigrationInsert :one
INSERT INTO _migration (
    version
) VALUES (
    $1
) RETURNING id, created_at, version
`

func (q *Queries) MigrationInsert(ctx context.Context, db DBTX, version int64) (*Migration, error) {
	row := db.QueryRow(ctx, migrationInsert, version)
	var i Migration
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Version)
	return &i, err
}

const migrationInsertMany = `-- name: MigrationInsertMany :many
INSERT INTO _migration (
    version
)
SELECT
    unnest($1::bigint[])
RETURNING id, created_at, version
`

func (q *Queries) MigrationInsertMany(ctx context.Context, db DBTX, version []int64) ([]*Migration, error) {
	rows, err := db.Query(ctx, migrationInsertMany, version)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Migration
	for rows.Next() {
		var i Migration
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Version); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tableExists = `-- name: TableExists :one
SELECT CASE WHEN to_regclass($1) IS NULL THEN false
            ELSE true END
`

func (q *Queries) TableExists(ctx context.Context, db DBTX, tableName string) (bool, error) {
	row := db.QueryRow(ctx, tableExists, tableName)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}
